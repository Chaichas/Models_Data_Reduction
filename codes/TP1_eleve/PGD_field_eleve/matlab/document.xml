<?xml version="1.0" encoding="UTF-8"?><w:document xmlns:w="http://schemas.openxmlformats.org/wordprocessingml/2006/main"><w:body><w:p><w:pPr><w:pStyle w:val="title"/><w:jc w:val="center"/></w:pPr><w:r><w:t>PGD Approximation of a random space-time field </w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="title"/><w:jc w:val="center"/></w:pPr><w:r><w:t>- A POSTERIORI-</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="text"/><w:jc w:val="right"/></w:pPr><w:r><w:rPr><w:i/></w:rPr><w:t>V. Matray</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="code"/></w:pPr><w:r><w:t><![CDATA[clear all
close all
clc]]></w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="text"/><w:jc w:val="left"/></w:pPr><w:r><w:t>Time discretisation</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="code"/></w:pPr><w:r><w:t><![CDATA[T   = 10; 
n_T = 400; 
tf  = linspace(0,T,n_T);     % fine discretisation
tc  = linspace(0,T,n_T/10);  % coarse discretisation
dt  = tf(2); % time step]]></w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="text"/><w:jc w:val="left"/></w:pPr><w:r><w:t>Space discretisation</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="code"/></w:pPr><w:r><w:t><![CDATA[L = 1; 
n_X = 200; 
xf  = linspace(0,L,n_X);    % fine discretisation
xc  = linspace(0,L,n_X/10); % coarse discretisation
dx  = xf(2);]]></w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="text"/><w:jc w:val="left"/></w:pPr><w:r><w:t>Display of the field smoothed to approximated by PGD </w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="code"/></w:pPr><w:r><w:t><![CDATA[% Meshes (fine and coarse)
[mesh_x_f,mesh_t_f] = meshgrid(xf,tf);
[mesh_x_g,mesh_t_g] = meshgrid(xc,tc);

% Random function on the coarse mesh:
Ug = rand(n_T/10,n_X/10);

% Interpolation on the fine mesh to get a 
% smooth distribution : (If the field is too discontinuous
% the PGD will have trouble approximating it: 
% you can check this at the end of the session).

Uf = interp2(mesh_x_g,mesh_t_g,Ug,mesh_x_f,mesh_t_f,'spline');

% Display distribution
figure()
subplot(1,2,1)
surf(xc,tc,Ug)
xlabel('x')
ylabel('t')
title("Coarse distribution")
shading interp

subplot(1,2,2)
surf(xf,tf,Uf)
xlabel('x')
ylabel('t')
title("Fine distribution")
shading interp]]></w:t></w:r></w:p><w:p><w:pPr><w:sectPr/></w:pPr></w:p><w:p><w:pPr><w:pStyle w:val="heading"/><w:jc w:val="center"/></w:pPr><w:r><w:t>Elementary matrix and assembly for integration </w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="code"/></w:pPr><w:r><w:t><![CDATA[%TO DO]]></w:t></w:r></w:p><w:p><w:pPr><w:sectPr/></w:pPr></w:p><w:p><w:pPr><w:pStyle w:val="heading"/><w:jc w:val="center"/></w:pPr><w:r><w:t>PGD Approximation</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="code"/></w:pPr><w:r><w:t><![CDATA[% Number of modes
n_modes    = 200;

% initialisation
Lambda     = zeros(n_X,n_modes);
Gamma      = zeros(n_T,n_modes);
U_PGD      = zeros(n_X,n_T);
PGD_error = zeros(n_modes,1);]]></w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="text"/><w:jc w:val="left"/></w:pPr><w:r><w:t>Greedy algorithm + fixed point </w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="code"/></w:pPr><w:r><w:t><![CDATA[for mode = 1:n_modes
    
    U_PGD = Lambda*Gamma';
    
    % Add new mode
    
    
    
    
    % Fixed point algorithm
    while 1% ?
        
      
        
        % Save old function Gamma
        
        
        % Compute new space function Lambda
        
        
        % Normalisation

        
        % Compute new time function 

        
        % update stagnation criteria
        
    end
    

    % Orthogonalisation
     %We'll do this after we've successfully run the greedy
     % algorithm and managed to calculate the error in 
     % space-time. All we need to do here is to implement 
     % the Gram-Schmidt algorithm.
     % Note that mode orthogonalization is not useful here,
     % but it will be in the next TP 
     % (a priori use of the PGD).

    % compute the new PGD approximation with the added mode
    U_PGD = Lambda*Gamma';
    
    % Calculation of the reconstruction error with the sptio-temporal norm
   
    
    
%     surf(mesh_x_f,mesh_t_f,U_PGD)
%     xlabel('x')
%     ylabel('y')
%     zlabel('U PGD')
%     shading interp
%     Title = ["Approximation with "+ mode " mode(s)"];
%     title(Title)
%     pause
end 
]]></w:t></w:r></w:p></w:body></w:document>